/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const Status = {
  Healthy: "healthy",
  Degraded: "degraded",
  Unhealthy: "unhealthy",
} as const;
export type Status = ClosedEnum<typeof Status>;

export const CheckStatus = {
  Pass: "pass",
  Fail: "fail",
} as const;
export type CheckStatus = ClosedEnum<typeof CheckStatus>;

export type Check = {
  name: string;
  status: CheckStatus;
  duration?: number | undefined;
  error?: string | undefined;
  details?: { [k: string]: any | null } | undefined;
};

export type HealthCheck = {
  status: Status;
  timestamp: string;
  uptime: number;
  checks: Array<Check>;
  version?: string | undefined;
};

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const CheckStatus$inboundSchema: z.ZodNativeEnum<typeof CheckStatus> = z
  .nativeEnum(CheckStatus);

/** @internal */
export const CheckStatus$outboundSchema: z.ZodNativeEnum<typeof CheckStatus> =
  CheckStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckStatus$ {
  /** @deprecated use `CheckStatus$inboundSchema` instead. */
  export const inboundSchema = CheckStatus$inboundSchema;
  /** @deprecated use `CheckStatus$outboundSchema` instead. */
  export const outboundSchema = CheckStatus$outboundSchema;
}

/** @internal */
export const Check$inboundSchema: z.ZodType<Check, z.ZodTypeDef, unknown> = z
  .object({
    name: z.string(),
    status: CheckStatus$inboundSchema,
    duration: z.number().optional(),
    error: z.string().optional(),
    details: z.record(z.nullable(z.any())).optional(),
  });

/** @internal */
export type Check$Outbound = {
  name: string;
  status: string;
  duration?: number | undefined;
  error?: string | undefined;
  details?: { [k: string]: any | null } | undefined;
};

/** @internal */
export const Check$outboundSchema: z.ZodType<
  Check$Outbound,
  z.ZodTypeDef,
  Check
> = z.object({
  name: z.string(),
  status: CheckStatus$outboundSchema,
  duration: z.number().optional(),
  error: z.string().optional(),
  details: z.record(z.nullable(z.any())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Check$ {
  /** @deprecated use `Check$inboundSchema` instead. */
  export const inboundSchema = Check$inboundSchema;
  /** @deprecated use `Check$outboundSchema` instead. */
  export const outboundSchema = Check$outboundSchema;
  /** @deprecated use `Check$Outbound` instead. */
  export type Outbound = Check$Outbound;
}

export function checkToJSON(check: Check): string {
  return JSON.stringify(Check$outboundSchema.parse(check));
}

export function checkFromJSON(
  jsonString: string,
): SafeParseResult<Check, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Check$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Check' from JSON`,
  );
}

/** @internal */
export const HealthCheck$inboundSchema: z.ZodType<
  HealthCheck,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: Status$inboundSchema,
  timestamp: z.string(),
  uptime: z.number(),
  checks: z.array(z.lazy(() => Check$inboundSchema)),
  version: z.string().optional(),
});

/** @internal */
export type HealthCheck$Outbound = {
  status: string;
  timestamp: string;
  uptime: number;
  checks: Array<Check$Outbound>;
  version?: string | undefined;
};

/** @internal */
export const HealthCheck$outboundSchema: z.ZodType<
  HealthCheck$Outbound,
  z.ZodTypeDef,
  HealthCheck
> = z.object({
  status: Status$outboundSchema,
  timestamp: z.string(),
  uptime: z.number(),
  checks: z.array(z.lazy(() => Check$outboundSchema)),
  version: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HealthCheck$ {
  /** @deprecated use `HealthCheck$inboundSchema` instead. */
  export const inboundSchema = HealthCheck$inboundSchema;
  /** @deprecated use `HealthCheck$outboundSchema` instead. */
  export const outboundSchema = HealthCheck$outboundSchema;
  /** @deprecated use `HealthCheck$Outbound` instead. */
  export type Outbound = HealthCheck$Outbound;
}

export function healthCheckToJSON(healthCheck: HealthCheck): string {
  return JSON.stringify(HealthCheck$outboundSchema.parse(healthCheck));
}

export function healthCheckFromJSON(
  jsonString: string,
): SafeParseResult<HealthCheck, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HealthCheck$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HealthCheck' from JSON`,
  );
}
