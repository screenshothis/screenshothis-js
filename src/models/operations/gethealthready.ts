/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const StatusNotReady = {
  NotReady: "not ready",
} as const;
export type StatusNotReady = ClosedEnum<typeof StatusNotReady>;

export const StatusReady = {
  Ready: "ready",
} as const;
export type StatusReady = ClosedEnum<typeof StatusReady>;

/**
 * Service is ready
 */
export type GetHealthReadyResponse = {
  status: StatusReady;
  timestamp: string;
};

/** @internal */
export const StatusNotReady$inboundSchema: z.ZodNativeEnum<
  typeof StatusNotReady
> = z.nativeEnum(StatusNotReady);

/** @internal */
export const StatusNotReady$outboundSchema: z.ZodNativeEnum<
  typeof StatusNotReady
> = StatusNotReady$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusNotReady$ {
  /** @deprecated use `StatusNotReady$inboundSchema` instead. */
  export const inboundSchema = StatusNotReady$inboundSchema;
  /** @deprecated use `StatusNotReady$outboundSchema` instead. */
  export const outboundSchema = StatusNotReady$outboundSchema;
}

/** @internal */
export const StatusReady$inboundSchema: z.ZodNativeEnum<typeof StatusReady> = z
  .nativeEnum(StatusReady);

/** @internal */
export const StatusReady$outboundSchema: z.ZodNativeEnum<typeof StatusReady> =
  StatusReady$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusReady$ {
  /** @deprecated use `StatusReady$inboundSchema` instead. */
  export const inboundSchema = StatusReady$inboundSchema;
  /** @deprecated use `StatusReady$outboundSchema` instead. */
  export const outboundSchema = StatusReady$outboundSchema;
}

/** @internal */
export const GetHealthReadyResponse$inboundSchema: z.ZodType<
  GetHealthReadyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: StatusReady$inboundSchema,
  timestamp: z.string(),
});

/** @internal */
export type GetHealthReadyResponse$Outbound = {
  status: string;
  timestamp: string;
};

/** @internal */
export const GetHealthReadyResponse$outboundSchema: z.ZodType<
  GetHealthReadyResponse$Outbound,
  z.ZodTypeDef,
  GetHealthReadyResponse
> = z.object({
  status: StatusReady$outboundSchema,
  timestamp: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHealthReadyResponse$ {
  /** @deprecated use `GetHealthReadyResponse$inboundSchema` instead. */
  export const inboundSchema = GetHealthReadyResponse$inboundSchema;
  /** @deprecated use `GetHealthReadyResponse$outboundSchema` instead. */
  export const outboundSchema = GetHealthReadyResponse$outboundSchema;
  /** @deprecated use `GetHealthReadyResponse$Outbound` instead. */
  export type Outbound = GetHealthReadyResponse$Outbound;
}

export function getHealthReadyResponseToJSON(
  getHealthReadyResponse: GetHealthReadyResponse,
): string {
  return JSON.stringify(
    GetHealthReadyResponse$outboundSchema.parse(getHealthReadyResponse),
  );
}

export function getHealthReadyResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetHealthReadyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetHealthReadyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHealthReadyResponse' from JSON`,
  );
}
