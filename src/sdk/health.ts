/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { healthGet } from "../funcs/healthGet.js";
import { healthGetLive } from "../funcs/healthGetLive.js";
import { healthGetReady } from "../funcs/healthGetReady.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Health extends ClientSDK {
  /**
   * Comprehensive health check
   *
   * @remarks
   * Performs a comprehensive health check of all critical system components including database connectivity, storage availability, job queue status, and S3 functionality. Returns detailed status information for monitoring and alerting systems.
   */
  async get(
    options?: RequestOptions,
  ): Promise<models.HealthCheck> {
    return unwrapAsync(healthGet(
      this,
      options,
    ));
  }

  /**
   * Readiness probe
   *
   * @remarks
   * Kubernetes-compatible readiness probe that verifies the service is ready to accept traffic. Checks database connectivity to ensure the service can handle requests. Used by orchestrators to determine when to route traffic to this instance.
   */
  async getReady(
    options?: RequestOptions,
  ): Promise<operations.GetHealthReadyResponse> {
    return unwrapAsync(healthGetReady(
      this,
      options,
    ));
  }

  /**
   * Liveness probe
   *
   * @remarks
   * Kubernetes-compatible liveness probe that indicates whether the service is alive and functioning. This lightweight check verifies the application is responsive and should be used by orchestrators to determine if the container needs to be restarted.
   */
  async getLive(
    options?: RequestOptions,
  ): Promise<operations.GetHealthLiveResponse> {
    return unwrapAsync(healthGetLive(
      this,
      options,
    ));
  }
}
