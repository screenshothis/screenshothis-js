/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as models from "../index.js";
import { ScreenshothisError } from "./screenshothiserror.js";

export type HealthCheckErrorData = {
  status: models.Status;
  timestamp: string;
  uptime: number;
  checks: Array<models.Check>;
  version?: string | undefined;
};

export class HealthCheckError extends ScreenshothisError {
  status: models.Status;
  timestamp: string;
  uptime: number;
  checks: Array<models.Check>;
  version?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HealthCheckErrorData;

  constructor(
    err: HealthCheckErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.status = err.status;
    this.timestamp = err.timestamp;
    this.uptime = err.uptime;
    this.checks = err.checks;
    if (err.version != null) this.version = err.version;

    this.name = "HealthCheckError";
  }
}

/** @internal */
export const HealthCheckError$inboundSchema: z.ZodType<
  HealthCheckError,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: models.Status$inboundSchema,
  timestamp: z.string(),
  uptime: z.number(),
  checks: z.array(models.Check$inboundSchema),
  version: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new HealthCheckError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type HealthCheckError$Outbound = {
  status: string;
  timestamp: string;
  uptime: number;
  checks: Array<models.Check$Outbound>;
  version?: string | undefined;
};

/** @internal */
export const HealthCheckError$outboundSchema: z.ZodType<
  HealthCheckError$Outbound,
  z.ZodTypeDef,
  HealthCheckError
> = z.instanceof(HealthCheckError)
  .transform(v => v.data$)
  .pipe(z.object({
    status: models.Status$outboundSchema,
    timestamp: z.string(),
    uptime: z.number(),
    checks: z.array(models.Check$outboundSchema),
    version: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HealthCheckError$ {
  /** @deprecated use `HealthCheckError$inboundSchema` instead. */
  export const inboundSchema = HealthCheckError$inboundSchema;
  /** @deprecated use `HealthCheckError$outboundSchema` instead. */
  export const outboundSchema = HealthCheckError$outboundSchema;
  /** @deprecated use `HealthCheckError$Outbound` instead. */
  export type Outbound = HealthCheckError$Outbound;
}
