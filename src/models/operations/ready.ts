/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const StatusNotReady = {
  NotReady: "not ready",
} as const;
export type StatusNotReady = ClosedEnum<typeof StatusNotReady>;

export const ReadyStatus = {
  Ready: "ready",
} as const;
export type ReadyStatus = ClosedEnum<typeof ReadyStatus>;

/**
 * Service is ready
 */
export type ReadyResponse = {
  status: ReadyStatus;
  timestamp: string;
};

/** @internal */
export const StatusNotReady$inboundSchema: z.ZodNativeEnum<
  typeof StatusNotReady
> = z.nativeEnum(StatusNotReady);

/** @internal */
export const StatusNotReady$outboundSchema: z.ZodNativeEnum<
  typeof StatusNotReady
> = StatusNotReady$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusNotReady$ {
  /** @deprecated use `StatusNotReady$inboundSchema` instead. */
  export const inboundSchema = StatusNotReady$inboundSchema;
  /** @deprecated use `StatusNotReady$outboundSchema` instead. */
  export const outboundSchema = StatusNotReady$outboundSchema;
}

/** @internal */
export const ReadyStatus$inboundSchema: z.ZodNativeEnum<typeof ReadyStatus> = z
  .nativeEnum(ReadyStatus);

/** @internal */
export const ReadyStatus$outboundSchema: z.ZodNativeEnum<typeof ReadyStatus> =
  ReadyStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadyStatus$ {
  /** @deprecated use `ReadyStatus$inboundSchema` instead. */
  export const inboundSchema = ReadyStatus$inboundSchema;
  /** @deprecated use `ReadyStatus$outboundSchema` instead. */
  export const outboundSchema = ReadyStatus$outboundSchema;
}

/** @internal */
export const ReadyResponse$inboundSchema: z.ZodType<
  ReadyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: ReadyStatus$inboundSchema,
  timestamp: z.string(),
});

/** @internal */
export type ReadyResponse$Outbound = {
  status: string;
  timestamp: string;
};

/** @internal */
export const ReadyResponse$outboundSchema: z.ZodType<
  ReadyResponse$Outbound,
  z.ZodTypeDef,
  ReadyResponse
> = z.object({
  status: ReadyStatus$outboundSchema,
  timestamp: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadyResponse$ {
  /** @deprecated use `ReadyResponse$inboundSchema` instead. */
  export const inboundSchema = ReadyResponse$inboundSchema;
  /** @deprecated use `ReadyResponse$outboundSchema` instead. */
  export const outboundSchema = ReadyResponse$outboundSchema;
  /** @deprecated use `ReadyResponse$Outbound` instead. */
  export type Outbound = ReadyResponse$Outbound;
}

export function readyResponseToJSON(readyResponse: ReadyResponse): string {
  return JSON.stringify(ReadyResponse$outboundSchema.parse(readyResponse));
}

export function readyResponseFromJSON(
  jsonString: string,
): SafeParseResult<ReadyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadyResponse' from JSON`,
  );
}
