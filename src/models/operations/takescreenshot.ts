/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Output image format. JPEG offers smaller file sizes, PNG supports transparency, WebP provides modern compression.
 */
export const Format = {
  Jpeg: "jpeg",
  Png: "png",
  Webp: "webp",
} as const;
/**
 * Output image format. JPEG offers smaller file sizes, PNG supports transparency, WebP provides modern compression.
 */
export type Format = ClosedEnum<typeof Format>;

/**
 * Types of web resources that can be blocked during screenshot capture
 */
export const BlockResource = {
  Document: "document",
  Stylesheet: "stylesheet",
  Image: "image",
  Media: "media",
  Font: "font",
  Script: "script",
  Texttrack: "texttrack",
  Xhr: "xhr",
  Fetch: "fetch",
  Prefetch: "prefetch",
  Eventsource: "eventsource",
  Websocket: "websocket",
  Manifest: "manifest",
  Signedexchange: "signedexchange",
  Ping: "ping",
  Cspviolationreport: "cspviolationreport",
  Preflight: "preflight",
  Other: "other",
} as const;
/**
 * Types of web resources that can be blocked during screenshot capture
 */
export type BlockResource = ClosedEnum<typeof BlockResource>;

/**
 * Set the preferred color scheme for websites that support dark/light mode theming
 */
export const PrefersColorScheme = {
  Light: "light",
  Dark: "dark",
} as const;
/**
 * Set the preferred color scheme for websites that support dark/light mode theming
 */
export type PrefersColorScheme = ClosedEnum<typeof PrefersColorScheme>;

/**
 * Accessibility setting to reduce animations and transitions for motion-sensitive users
 */
export const PrefersReducedMotion = {
  NoPreference: "no-preference",
  Reduce: "reduce",
} as const;
/**
 * Accessibility setting to reduce animations and transitions for motion-sensitive users
 */
export type PrefersReducedMotion = ClosedEnum<typeof PrefersReducedMotion>;

export type TakeScreenshotRequest = {
  apiKey: string;
  url: string;
  selector?: string | null | undefined;
  width?: number | null | undefined;
  height?: number | null | undefined;
  isMobile?: boolean | undefined;
  isLandscape?: boolean | undefined;
  hasTouch?: boolean | undefined;
  deviceScaleFactor?: number | null | undefined;
  fullPage?: boolean | undefined;
  fullPageScroll?: boolean | undefined;
  fullPageScrollDuration?: number | null | undefined;
  /**
   * Output image format. JPEG offers smaller file sizes, PNG supports transparency, WebP provides modern compression.
   */
  format?: Format | undefined;
  quality?: number | undefined;
  blockAds?: boolean | undefined;
  blockCookieBanners?: boolean | undefined;
  blockTrackers?: boolean | undefined;
  blockRequests?: string | undefined;
  blockResources?: Array<BlockResource> | undefined;
  /**
   * Set the preferred color scheme for websites that support dark/light mode theming
   */
  prefersColorScheme?: PrefersColorScheme | undefined;
  /**
   * Accessibility setting to reduce animations and transitions for motion-sensitive users
   */
  prefersReducedMotion?: PrefersReducedMotion | undefined;
  isCached?: boolean | undefined;
  cacheTtl?: number | undefined;
  cacheKey?: string | undefined;
  userAgent?: string | undefined;
  headers?: string | undefined;
  cookies?: string | undefined;
  bypassCsp?: boolean | undefined;
};

export type TakeScreenshotResponse =
  | ReadableStream<Uint8Array>
  | ReadableStream<Uint8Array>
  | ReadableStream<Uint8Array>;

/** @internal */
export const Format$inboundSchema: z.ZodNativeEnum<typeof Format> = z
  .nativeEnum(Format);

/** @internal */
export const Format$outboundSchema: z.ZodNativeEnum<typeof Format> =
  Format$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Format$ {
  /** @deprecated use `Format$inboundSchema` instead. */
  export const inboundSchema = Format$inboundSchema;
  /** @deprecated use `Format$outboundSchema` instead. */
  export const outboundSchema = Format$outboundSchema;
}

/** @internal */
export const BlockResource$inboundSchema: z.ZodNativeEnum<
  typeof BlockResource
> = z.nativeEnum(BlockResource);

/** @internal */
export const BlockResource$outboundSchema: z.ZodNativeEnum<
  typeof BlockResource
> = BlockResource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BlockResource$ {
  /** @deprecated use `BlockResource$inboundSchema` instead. */
  export const inboundSchema = BlockResource$inboundSchema;
  /** @deprecated use `BlockResource$outboundSchema` instead. */
  export const outboundSchema = BlockResource$outboundSchema;
}

/** @internal */
export const PrefersColorScheme$inboundSchema: z.ZodNativeEnum<
  typeof PrefersColorScheme
> = z.nativeEnum(PrefersColorScheme);

/** @internal */
export const PrefersColorScheme$outboundSchema: z.ZodNativeEnum<
  typeof PrefersColorScheme
> = PrefersColorScheme$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrefersColorScheme$ {
  /** @deprecated use `PrefersColorScheme$inboundSchema` instead. */
  export const inboundSchema = PrefersColorScheme$inboundSchema;
  /** @deprecated use `PrefersColorScheme$outboundSchema` instead. */
  export const outboundSchema = PrefersColorScheme$outboundSchema;
}

/** @internal */
export const PrefersReducedMotion$inboundSchema: z.ZodNativeEnum<
  typeof PrefersReducedMotion
> = z.nativeEnum(PrefersReducedMotion);

/** @internal */
export const PrefersReducedMotion$outboundSchema: z.ZodNativeEnum<
  typeof PrefersReducedMotion
> = PrefersReducedMotion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrefersReducedMotion$ {
  /** @deprecated use `PrefersReducedMotion$inboundSchema` instead. */
  export const inboundSchema = PrefersReducedMotion$inboundSchema;
  /** @deprecated use `PrefersReducedMotion$outboundSchema` instead. */
  export const outboundSchema = PrefersReducedMotion$outboundSchema;
}

/** @internal */
export const TakeScreenshotRequest$inboundSchema: z.ZodType<
  TakeScreenshotRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  api_key: z.string(),
  url: z.string(),
  selector: z.nullable(z.string()).optional(),
  width: z.nullable(z.number().default(1920)),
  height: z.nullable(z.number().default(1080)),
  is_mobile: z.boolean().default(false),
  is_landscape: z.boolean().default(false),
  has_touch: z.boolean().default(false),
  device_scale_factor: z.nullable(z.number().default(1)),
  full_page: z.boolean().default(false),
  full_page_scroll: z.boolean().default(true),
  full_page_scroll_duration: z.nullable(z.number().default(400)),
  format: Format$inboundSchema.default("jpeg"),
  quality: z.number().default(80),
  block_ads: z.boolean().default(false),
  block_cookie_banners: z.boolean().default(false),
  block_trackers: z.boolean().default(false),
  block_requests: z.string().optional(),
  block_resources: z.array(BlockResource$inboundSchema).optional(),
  prefers_color_scheme: PrefersColorScheme$inboundSchema.default("light"),
  prefers_reduced_motion: PrefersReducedMotion$inboundSchema.default(
    "no-preference",
  ),
  is_cached: z.boolean().default(false),
  cache_ttl: z.number().default(3600),
  cache_key: z.string().optional(),
  user_agent: z.string().optional(),
  headers: z.string().optional(),
  cookies: z.string().optional(),
  bypass_csp: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "api_key": "apiKey",
    "is_mobile": "isMobile",
    "is_landscape": "isLandscape",
    "has_touch": "hasTouch",
    "device_scale_factor": "deviceScaleFactor",
    "full_page": "fullPage",
    "full_page_scroll": "fullPageScroll",
    "full_page_scroll_duration": "fullPageScrollDuration",
    "block_ads": "blockAds",
    "block_cookie_banners": "blockCookieBanners",
    "block_trackers": "blockTrackers",
    "block_requests": "blockRequests",
    "block_resources": "blockResources",
    "prefers_color_scheme": "prefersColorScheme",
    "prefers_reduced_motion": "prefersReducedMotion",
    "is_cached": "isCached",
    "cache_ttl": "cacheTtl",
    "cache_key": "cacheKey",
    "user_agent": "userAgent",
    "bypass_csp": "bypassCsp",
  });
});

/** @internal */
export type TakeScreenshotRequest$Outbound = {
  api_key: string;
  url: string;
  selector?: string | null | undefined;
  width: number | null;
  height: number | null;
  is_mobile: boolean;
  is_landscape: boolean;
  has_touch: boolean;
  device_scale_factor: number | null;
  full_page: boolean;
  full_page_scroll: boolean;
  full_page_scroll_duration: number | null;
  format: string;
  quality: number;
  block_ads: boolean;
  block_cookie_banners: boolean;
  block_trackers: boolean;
  block_requests?: string | undefined;
  block_resources?: Array<string> | undefined;
  prefers_color_scheme: string;
  prefers_reduced_motion: string;
  is_cached: boolean;
  cache_ttl: number;
  cache_key?: string | undefined;
  user_agent?: string | undefined;
  headers?: string | undefined;
  cookies?: string | undefined;
  bypass_csp: boolean;
};

/** @internal */
export const TakeScreenshotRequest$outboundSchema: z.ZodType<
  TakeScreenshotRequest$Outbound,
  z.ZodTypeDef,
  TakeScreenshotRequest
> = z.object({
  apiKey: z.string(),
  url: z.string(),
  selector: z.nullable(z.string()).optional(),
  width: z.nullable(z.number().default(1920)),
  height: z.nullable(z.number().default(1080)),
  isMobile: z.boolean().default(false),
  isLandscape: z.boolean().default(false),
  hasTouch: z.boolean().default(false),
  deviceScaleFactor: z.nullable(z.number().default(1)),
  fullPage: z.boolean().default(false),
  fullPageScroll: z.boolean().default(true),
  fullPageScrollDuration: z.nullable(z.number().default(400)),
  format: Format$outboundSchema.default("jpeg"),
  quality: z.number().default(80),
  blockAds: z.boolean().default(false),
  blockCookieBanners: z.boolean().default(false),
  blockTrackers: z.boolean().default(false),
  blockRequests: z.string().optional(),
  blockResources: z.array(BlockResource$outboundSchema).optional(),
  prefersColorScheme: PrefersColorScheme$outboundSchema.default("light"),
  prefersReducedMotion: PrefersReducedMotion$outboundSchema.default(
    "no-preference",
  ),
  isCached: z.boolean().default(false),
  cacheTtl: z.number().default(3600),
  cacheKey: z.string().optional(),
  userAgent: z.string().optional(),
  headers: z.string().optional(),
  cookies: z.string().optional(),
  bypassCsp: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    apiKey: "api_key",
    isMobile: "is_mobile",
    isLandscape: "is_landscape",
    hasTouch: "has_touch",
    deviceScaleFactor: "device_scale_factor",
    fullPage: "full_page",
    fullPageScroll: "full_page_scroll",
    fullPageScrollDuration: "full_page_scroll_duration",
    blockAds: "block_ads",
    blockCookieBanners: "block_cookie_banners",
    blockTrackers: "block_trackers",
    blockRequests: "block_requests",
    blockResources: "block_resources",
    prefersColorScheme: "prefers_color_scheme",
    prefersReducedMotion: "prefers_reduced_motion",
    isCached: "is_cached",
    cacheTtl: "cache_ttl",
    cacheKey: "cache_key",
    userAgent: "user_agent",
    bypassCsp: "bypass_csp",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TakeScreenshotRequest$ {
  /** @deprecated use `TakeScreenshotRequest$inboundSchema` instead. */
  export const inboundSchema = TakeScreenshotRequest$inboundSchema;
  /** @deprecated use `TakeScreenshotRequest$outboundSchema` instead. */
  export const outboundSchema = TakeScreenshotRequest$outboundSchema;
  /** @deprecated use `TakeScreenshotRequest$Outbound` instead. */
  export type Outbound = TakeScreenshotRequest$Outbound;
}

export function takeScreenshotRequestToJSON(
  takeScreenshotRequest: TakeScreenshotRequest,
): string {
  return JSON.stringify(
    TakeScreenshotRequest$outboundSchema.parse(takeScreenshotRequest),
  );
}

export function takeScreenshotRequestFromJSON(
  jsonString: string,
): SafeParseResult<TakeScreenshotRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TakeScreenshotRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TakeScreenshotRequest' from JSON`,
  );
}

/** @internal */
export const TakeScreenshotResponse$inboundSchema: z.ZodType<
  TakeScreenshotResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.instanceof(ReadableStream<Uint8Array>),
  z.instanceof(ReadableStream<Uint8Array>),
  z.instanceof(ReadableStream<Uint8Array>),
]);

/** @internal */
export type TakeScreenshotResponse$Outbound =
  | ReadableStream<Uint8Array>
  | ReadableStream<Uint8Array>
  | ReadableStream<Uint8Array>;

/** @internal */
export const TakeScreenshotResponse$outboundSchema: z.ZodType<
  TakeScreenshotResponse$Outbound,
  z.ZodTypeDef,
  TakeScreenshotResponse
> = z.union([
  z.instanceof(ReadableStream<Uint8Array>),
  z.instanceof(ReadableStream<Uint8Array>),
  z.instanceof(ReadableStream<Uint8Array>),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TakeScreenshotResponse$ {
  /** @deprecated use `TakeScreenshotResponse$inboundSchema` instead. */
  export const inboundSchema = TakeScreenshotResponse$inboundSchema;
  /** @deprecated use `TakeScreenshotResponse$outboundSchema` instead. */
  export const outboundSchema = TakeScreenshotResponse$outboundSchema;
  /** @deprecated use `TakeScreenshotResponse$Outbound` instead. */
  export type Outbound = TakeScreenshotResponse$Outbound;
}

export function takeScreenshotResponseToJSON(
  takeScreenshotResponse: TakeScreenshotResponse,
): string {
  return JSON.stringify(
    TakeScreenshotResponse$outboundSchema.parse(takeScreenshotResponse),
  );
}

export function takeScreenshotResponseFromJSON(
  jsonString: string,
): SafeParseResult<TakeScreenshotResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TakeScreenshotResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TakeScreenshotResponse' from JSON`,
  );
}
