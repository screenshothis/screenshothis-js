/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const StatusNotAlive = {
  NotAlive: "not alive",
} as const;
export type StatusNotAlive = ClosedEnum<typeof StatusNotAlive>;

export const StatusAlive = {
  Alive: "alive",
} as const;
export type StatusAlive = ClosedEnum<typeof StatusAlive>;

/**
 * Service is alive
 */
export type GetHealthLiveResponse = {
  status: StatusAlive;
  timestamp: string;
};

/** @internal */
export const StatusNotAlive$inboundSchema: z.ZodNativeEnum<
  typeof StatusNotAlive
> = z.nativeEnum(StatusNotAlive);

/** @internal */
export const StatusNotAlive$outboundSchema: z.ZodNativeEnum<
  typeof StatusNotAlive
> = StatusNotAlive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusNotAlive$ {
  /** @deprecated use `StatusNotAlive$inboundSchema` instead. */
  export const inboundSchema = StatusNotAlive$inboundSchema;
  /** @deprecated use `StatusNotAlive$outboundSchema` instead. */
  export const outboundSchema = StatusNotAlive$outboundSchema;
}

/** @internal */
export const StatusAlive$inboundSchema: z.ZodNativeEnum<typeof StatusAlive> = z
  .nativeEnum(StatusAlive);

/** @internal */
export const StatusAlive$outboundSchema: z.ZodNativeEnum<typeof StatusAlive> =
  StatusAlive$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusAlive$ {
  /** @deprecated use `StatusAlive$inboundSchema` instead. */
  export const inboundSchema = StatusAlive$inboundSchema;
  /** @deprecated use `StatusAlive$outboundSchema` instead. */
  export const outboundSchema = StatusAlive$outboundSchema;
}

/** @internal */
export const GetHealthLiveResponse$inboundSchema: z.ZodType<
  GetHealthLiveResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: StatusAlive$inboundSchema,
  timestamp: z.string(),
});

/** @internal */
export type GetHealthLiveResponse$Outbound = {
  status: string;
  timestamp: string;
};

/** @internal */
export const GetHealthLiveResponse$outboundSchema: z.ZodType<
  GetHealthLiveResponse$Outbound,
  z.ZodTypeDef,
  GetHealthLiveResponse
> = z.object({
  status: StatusAlive$outboundSchema,
  timestamp: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHealthLiveResponse$ {
  /** @deprecated use `GetHealthLiveResponse$inboundSchema` instead. */
  export const inboundSchema = GetHealthLiveResponse$inboundSchema;
  /** @deprecated use `GetHealthLiveResponse$outboundSchema` instead. */
  export const outboundSchema = GetHealthLiveResponse$outboundSchema;
  /** @deprecated use `GetHealthLiveResponse$Outbound` instead. */
  export type Outbound = GetHealthLiveResponse$Outbound;
}

export function getHealthLiveResponseToJSON(
  getHealthLiveResponse: GetHealthLiveResponse,
): string {
  return JSON.stringify(
    GetHealthLiveResponse$outboundSchema.parse(getHealthLiveResponse),
  );
}

export function getHealthLiveResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetHealthLiveResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetHealthLiveResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHealthLiveResponse' from JSON`,
  );
}
